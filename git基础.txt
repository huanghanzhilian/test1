安装Git

	安装完成后，还需要最后一步设置，在命令行输入：

	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"

	因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。

	注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。

	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"


创建版本库	

	初始化一个Git仓库，使用git init命令。

	添加文件到Git仓库，分两步：

   	第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

    	第二步，使用命令git commit，完成。git commit -m "代码提交信息" 


查询状态

	git status告诉你有文件被修改过，
	
	用git diff可以查看修改内容。

	检查当前文件状态git status

	查看修改内容git diff


版本回退

	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


撤销修改

	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。使用命令git reset --hard commit_id。

删除文件

	git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。


添加远程库

    	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

	分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

从远程库克隆
	
	要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

	Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
	
	git clone git@github.com:huanghanzhilian/gitskills.git 



创建与合并分支

	Git鼓励大量使用分支：

	查看分支：git branch

	创建分支：git branch <name>

	切换分支：git checkout <name>    git checkout master

	创建+切换分支：git checkout -b <name>

	合并某分支到当前分支：git merge <name>

	删除分支：git branch -d <name>

解决冲突

	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

	用git log --graph命令可以看到分支合并图。

分支管理策略

	Git分支十分强大，在团队开发中应该充分应用。

	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

Bug分支

	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

Feature分支

	开发一个新feature，最好新建一个分支；

	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

多人协作

    	查看远程库信息，使用git remote -v

    	本地新建的分支如果不推送到远程，对其他人就是不可见的；

   	从本地推送分支，使用git push origin branch-name，   git push origin master    如果推送失败，先用git pull抓取远程的新提交；  git pull origin gh-pages

   	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

    	建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

    	从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。








创建一个没有父节点的分支gh-pages。因为github规定，只有该分支中的页面，才会生成网页文件。
　$ git checkout --orphan gh-pages



建立远程对接
　$ git remote add origin https://github.com/username/jekyll_demo.git
推送分支
$ git push origin gh-pages


	git checkout dev
	jekyll build
	git add -A
	git commit -m "update dev"
rm -r cd g:/_site/*
cp -r _site/ /cd g:/
	git checkout master
rm -r ./*
cp -r cd g:/_site/* ./
	git add -A
	git commit -m "deploy blog"
	git push origin master
	git checkout dev












